box: debian

command-timeout: 60
no-response-timeout: 30

build:
  steps:
    - script:
        name: install dependencies
        code: |
            sed -i "s/jessie main/jessie main contrib non-free/" /etc/apt/sources.list
            apt-get -qq update
            apt-get install -y git build-essential flex bison zlib1g-dev libreadline-dev libncurses-dev libxt-dev libopenmpi-dev openmpi-bin rpm wget cmake hwloc scotch gfortran python unzip scons libiberty-dev libscotch-dev liblapack-dev libblas-dev cppcheck valgrind petsc-dev libmetis-dev libparmetis-dev
    - script:
        name: download foam-extend-3.2
        code: |
            git clone https://github.com/Unofficial-Extend-Project-Mirror/foam-extend-foam-extend-3.2.git foam-extend-3.2
            cd foam-extend-3.2
            rm -rf tutorials applications .git
    - script:
        name: configuration
        code: |
            sed -i s/"CC          = g++ -m64"/"CC          = mpicxx -m64"/g foam-extend-3.2/wmake/rules/linux64Gcc/c++
            sed -i s/"c++OPT      = -O3"/"c++OPT      = -O3 -DNDEBUG"/g foam-extend-3.2/wmake/rules/linux64Gcc/c++Opt
            sed -i s/"c++DBUG    = -ggdb3 -DFULLDEBUG"/"c++DBUG    = -g -DFULLDEBUG -DEIGEN_INITIALIZE_MATRICES_BY_NAN --coverage -fprofile-arcs -ftest-coverage"/g foam-extend-3.2/wmake/rules/linux64Gcc/c++Debug

            settings=foam-extend-3.2/etc/prefs.sh
            echo "#!/bin/bash" >> $settings
            echo "export FOAM_INST_DIR=`pwd`" >> $settings
            echo "export PARAVIEW_SYSTEM=1" >> $settings
            echo "export CMAKE_SYSTEM=1" >> $settings
            echo "export HWLOC_SYSTEM=1" >> $settings
            echo "export SCOTCH_SYSTEM=1" >> $settings
            echo "export SCOTCH_INCLUDE_DIR=/usr/include/scotch" >> $settings
            echo "export SCOTCH_LIB_DIR=/usr/lib" >> $settings
            echo "export PYFOAM_SYSTEM=1" >> $settings
            echo "export METIS_SYSTEM=1" >> $settings
            echo "export METIS_INCLUDE_DIR=/usr/include" >> $settings
            echo "export METIS_LIB_DIR=/usr/lib" >> $settings
            echo "export PARMETIS_SYSTEM=1" >> $settings
            echo "export PARMETIS_INCLUDE_DIR=/usr/include" >> $settings
            echo "export PARMETIS_LIB_DIR=/usr/lib" >> $settings
            echo "export CUDA_IGNORE=1" >> $settings
            echo "export SWAK4FOAM_SYSTEM=1" >> $settings
            echo "export PARMGRIDGEN_SYSTEM=1" >> $settings
            echo "export LIBCCMIO_SYSTEM=1" >> $settings
            echo "export WM_MPLIB=SYSTEMOPENMPI" >> $settings
            echo "export OPENMPI_DIR=/usr" >> $settings
            echo "export OPENMPI_BIN_DIR=/usr/bin" >> $settings
            echo "unset WM_THIRD_PARTY_USE_CMAKE_322" >> $settings
            echo "unset WM_THIRD_PARTY_USE_HWLOC_1101" >> $settings
            echo "unset WM_THIRD_PARTY_USE_SCOTCH_604" >> $settings
            echo "unset WM_THIRD_PARTY_USE_PYFOAM_064" >> $settings
            cat $settings
    - script:
        name: third-party packages
        code: |
            cd foam-extend-3.2 && source etc/prefs.sh && source etc/bashrc

            # wmake is required for subsequent targets
            ( cd wmake/src && make )

            # build ThirdParty sources
            ( cd $WM_THIRD_PARTY_DIR && ./AllMake )
    - script:
        name: foam-extend libraries-1
        code: |
            cd foam-extend-3.2 && source etc/prefs.sh && source etc/bashrc

            cd src
            wmakePrintBuild -check || /bin/rm -f foam/Make/$WM_OPTIONS/global.? 2>/dev/null
            wmakeLnInclude foam
            wmakeLnInclude meshTools
            wmakeLnInclude OSspecific/$WM_OSTYPE
            wmake libo  OSspecific/$WM_OSTYPE
            wmake libso foam
            decompositionMethods/AllwmakeLnInclude
            (cd decompositionMethods && wmakeLnInclude decompositionMethods && wmake libso decompositionMethods && wmake libso scotchDecomp)
    - script:
        name: foam-extend libraries-2
        code: |
            cd foam-extend-3.2 && source etc/prefs.sh && source etc/bashrc

            cd src
            wmake libso lagrangian/basic
            wmake libso edgeMesh
            wmake libso surfMesh
            wmake libso meshTools
            wmake libso finiteVolume
            wmake libso finiteArea
            wmake libso lduSolvers
    - script:
        name: foam-extend libraries-3
        code: |
            cd foam-extend-3.2 && source etc/prefs.sh && source etc/bashrc

            cd src
            wmake libso tetFiniteElement
            dynamicMesh/AllwmakeLnInclude
            dynamicMesh/Allwmake
            wmake libso coupledMatrix
            wmake libso sampling
            wmake libso ODE
    - script:
        name: foam-extend libraries-4
        code: |
            cd foam-extend-3.2 && source etc/prefs.sh && source etc/bashrc

            cd src
            thermophysicalModels/Allwmake
            transportModels/Allwmake
            turbulenceModels/Allwmake
            lagrangian/Allwmake
    - script:
        name: foam-extend libraries-5
        code: |
            cd foam-extend-3.2 && source etc/prefs.sh && source etc/bashrc

            cd src && wmake libso solidModels
    - script:
        name: cleanup build files
        code: |
            cd foam-extend-3.2
            find . -not -path './lib/linux64GccDPOpt' -not -path './ThirdParty/*' -name 'linux64GccDPOpt' -type d -print -prune -exec rm -rf {} \;
            find . -not -path './lib/linux64GccDPDebug' -not -path './ThirdParty/*' -name 'linux64GccDPDebug' -type d -print -prune -exec rm -rf {} \;
    - script:
        name: create archive
        code: |
            echo "export FOAM_INST_DIR=/home" >> foam-extend-3.2/etc/prefs.sh
            tar -czf foam-extend-3.2.tar.gz foam-extend-3.2
            rm -rf foam-extend-3.2

dealii:
  steps:
    - script:
        name: install dependencies
        code: |
            sed -i "s/jessie main/jessie main contrib non-free/" /etc/apt/sources.list
            apt-get -qq update
            apt-get install -y git build-essential flex bison zlib1g-dev libreadline-dev libncurses-dev libxt-dev libopenmpi-dev openmpi-bin rpm wget cmake hwloc scotch gfortran python unzip scons libiberty-dev libscotch-dev liblapack-dev libblas-dev cppcheck valgrind petsc-dev libmetis-dev libparmetis-dev
    - script:
        name: deal.II
        code: |
            cd /home
            wget https://github.com/dealii/dealii/releases/download/v8.4.1/dealii-8.4.1.tar.gz -O - | tar xz -C ./

            cd dealii-8.4.1 && mkdir build bin && cd build
            cmake -DDEAL_II_WITH_MPI=ON \
                -DDEAL_II_COMPONENT_EXAMPLES=OFF \
                -DCMAKE_INSTALL_PREFIX=`pwd`/../bin \
                -DCMAKE_BUILD_TYPE=Release \
                ..

            make -j `nproc` && make install && make test
            cd ..
            rm -rf build
    - script:
        name: copy to output dir
        code: mv foam-extend-3.2.tar.gz /home/
    - script:
        name: boost
        code: |
          cd /home
          wget http://downloads.sourceforge.net/project/boost/boost/1.55.0/boost_1_55_0.tar.bz2 -O - | tar x -C ./
    - script:
        name: googletest
        code: |
          cd /home
          wget https://github.com/google/googletest/archive/release-1.7.0.tar.gz -O - | tar xz -C ./
          cd googletest-release-1.7.0
          cmake -DCMAKE_CXX_COMPILER=g++ -DCMAKE_CC_COMPILER=gcc
          make -j `nprocs`
    - script:
        name: yaml-cpp
        code: |
          cd /home
          wget https://github.com/jbeder/yaml-cpp/archive/release-0.5.3.tar.gz -O - | tar xz -C ./
          export BOOST_ROOT=/home/boost_1_55_0
          cd yaml-cpp-release-0.5.3
          mkdir build && cd build
          CC=gcc CXX=g++ cmake -DBUILD_SHARED_LIBS=ON -DBoost_NO_BOOST_CMAKE=TRUE -DBoost_NO_SYSTEM_PATHS=TRUE -DBOOST_ROOT=${BOOST_ROOT} ..
          make -j `nprocs`
    - internal/docker-push:
        username: $DOCKER_USERNAME
        password: $DOCKER_PASSWORD
        repository: davidsblom/foam-fsi
        registry: https://registry.hub.docker.com

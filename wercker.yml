box: debian

command-timeout: 60
no-response-timeout: 30

build:
  steps:
    - script:
        name: install dependencies
        code: |
            sed -i "s/jessie main/jessie main contrib non-free/" /etc/apt/sources.list
            apt-get -qq update
            apt-get install -y git build-essential flex bison zlib1g-dev libreadline-dev libncurses-dev libxt-dev libopenmpi-dev openmpi-bin rpm wget cmake hwloc scotch gfortran python unzip scons libiberty-dev libscotch-dev liblapack-dev libblas-dev cppcheck valgrind petsc-dev libmetis-dev libparmetis-dev
    - script:
        name: download foam-extend-3.2
        code: |
            git clone git://git.code.sf.net/p/foam-extend/foam-extend-3.2
    - script:
        name: configuration
        code: |
            sed -i s/"CC          = g++ -m64"/"CC          = mpicxx -m64"/g foam-extend-3.2/wmake/rules/linux64Gcc/c++
            sed -i s/"c++OPT      = -O3"/"c++OPT      = -O3 -DNDEBUG"/g foam-extend-3.2/wmake/rules/linux64Gcc/c++Opt
            sed -i s/"c++DBUG    = -ggdb3 -DFULLDEBUG"/"c++DBUG    = -g -DFULLDEBUG -DEIGEN_INITIALIZE_MATRICES_BY_NAN --coverage -fprofile-arcs -ftest-coverage"/g foam-extend-3.2/wmake/rules/linux64Gcc/c++Debug

            settings=foam-extend-3.2/etc/prefs.sh
            echo "#!/bin/bash" >> $settings
            echo "export FOAM_INST_DIR=`pwd`" >> $settings
            echo "export PARAVIEW_SYSTEM=1" >> $settings
            echo "export CMAKE_SYSTEM=1" >> $settings
            echo "export HWLOC_SYSTEM=1" >> $settings
            echo "export SCOTCH_SYSTEM=1" >> $settings
            echo "export SCOTCH_INCLUDE_DIR=/usr/include/scotch" >> $settings
            echo "export SCOTCH_LIB_DIR=/usr/lib" >> $settings
            echo "export PYFOAM_SYSTEM=1" >> $settings
            echo "export METIS_SYSTEM=1" >> $settings
            echo "export METIS_INCLUDE_DIR=/usr/include" >> $settings
            echo "export METIS_LIB_DIR=/usr/lib" >> $settings
            echo "export PARMETIS_SYSTEM=1" >> $settings
            echo "export PARMETIS_INCLUDE_DIR=/usr/include" >> $settings
            echo "export PARMETIS_LIB_DIR=/usr/lib" >> $settings
            echo "export CUDA_IGNORE=1" >> $settings
            echo "export SWAK4FOAM_SYSTEM=1" >> $settings
            echo "export PARMGRIDGEN_SYSTEM=1" >> $settings
            echo "export LIBCCMIO_SYSTEM=1" >> $settings
            echo "export WM_MPLIB=SYSTEMOPENMPI" >> $settings
            echo "export OPENMPI_DIR=/usr" >> $settings
            echo "export OPENMPI_BIN_DIR=/usr/bin" >> $settings
            echo "unset WM_THIRD_PARTY_USE_CMAKE_322" >> $settings
            echo "unset WM_THIRD_PARTY_USE_HWLOC_1101" >> $settings
            echo "unset WM_THIRD_PARTY_USE_SCOTCH_604" >> $settings
            echo "unset WM_THIRD_PARTY_USE_PYFOAM_064" >> $settings
            cat $settings
    - script:
        name: third-party packages
        code: |
            cd foam-extend-3.2
            source etc/prefs.sh
            source etc/bashrc

            # wmake is required for subsequent targets
            ( cd wmake/src && make )

            # build ThirdParty sources
            ( cd $WM_THIRD_PARTY_DIR && ./AllMake )

            # cleanup build files
            rm -rf $WM_THIRD_PARTY_DIR/rpmBuild/BUILD/*
    - script:
        name: foam-extend libraries-1
        code: |
            cd foam-extend-3.2
            source etc/prefs.sh
            source etc/bashrc

            cd src
            wmakePrintBuild -check || /bin/rm -f foam/Make/$WM_OPTIONS/global.? 2>/dev/null
            wmakeLnInclude foam
            wmakeLnInclude meshTools
            wmakeLnInclude OSspecific/$WM_OSTYPE
            wmake libo  OSspecific/$WM_OSTYPE
            wmake libso foam
            decompositionMethods/AllwmakeLnInclude
            (cd decompositionMethods && wmakeLnInclude decompositionMethods && wmake libso decompositionMethods && wmake libso scotchDecomp)
    - script:
        name: foam-extend libraries-2
        code: |
            cd foam-extend-3.2
            source etc/prefs.sh
            source etc/bashrc

            cd src
            wmake libso lagrangian/basic
            wmake libso edgeMesh
            wmake libso surfMesh
            wmake libso meshTools
            wmake libso finiteVolume
            wmake libso finiteArea
            wmake libso lduSolvers
    - script:
        name: foam-extend libraries-3
        code: |
            cd foam-extend-3.2
            source etc/prefs.sh
            source etc/bashrc

            cd src
            wmake libso tetFiniteElement
            dynamicMesh/AllwmakeLnInclude
            dynamicMesh/Allwmake
            wmake libso coupledMatrix
            wmake libso sampling
            wmake libso ODE
    - script:
        name: foam-extend libraries-4
        code: |
            cd foam-extend-3.2
            source etc/prefs.sh
            source etc/bashrc

            cd src
            thermophysicalModels/Allwmake
            transportModels/Allwmake
            turbulenceModels/Allwmake
            lagrangian/Allwmake
            wmake libso solidModels
    - script:
        name: cleanup build files
        code: |
            cd foam-extend-3.2
            find . -not -path './lib/linux64GccDPOpt' -not -path './ThirdParty/*' -name 'linux64GccDPOpt' -type d -print -prune -exec rm -rf {} \;
            find . -not -path './lib/linux64GccDPDebug' -not -path './ThirdParty/*' -name 'linux64GccDPDebug' -type d -print -prune -exec rm -rf {} \;

dealii:
    steps:
        - script:
            name: compile
            code: |
                source foam-extend-3.2/etc/prefs.sh
                source foam-extend-3.2/etc/bashrc

                export DEALII_VERSION=8.4.1
                wget https://github.com/dealii/dealii/releases/download/v${DEALII_VERSION}/dealii-${DEALII_VERSION}.tar.gz
                tar xf dealii-${DEALII_VERSION}.tar.gz
                rm dealii-${DEALII_VERSION}.tar.gz

                cd dealii-${DEALII_VERSION} && mkdir build bin && cd build
                cmake -DDEAL_II_WITH_MPI=ON \
                    -DDEAL_II_COMPONENT_EXAMPLES=OFF \
                    -DCMAKE_INSTALL_PREFIX=`pwd`/../bin \
                    -DCMAKE_BUILD_TYPE=Release \
                    ..

                make -j $WM_NCOMPPROCS && make install && make test
                rm -rf build
        - internal/docker-push:
            username: $DOCKER_USERNAME
            password: $DOCKER_PASSWORD
            repository: davidsblom/foam-fsi
            registry: https://registry.hub.docker.com
        - script:
            name: cleanup
            code: rm -rf *
